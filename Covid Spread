class pair{
    int index;
    int min;
    pair(int index,int min){
        this.index=index;
        this.min=min;
    }
}
class Solution{
     public int ind(int i,int j,int col){
         return i*col+j;
     }
     public int helpaterp(int[][] hospital) {
        // code here
        int flag=0;
        int col=hospital[0].length;
        int row=hospital.length;
        int count_uninfected=0;
        Queue<pair> q=new LinkedList<>();
        for(int i=0;i<hospital.length;i++){
            for(int j=0;j<hospital[0].length;j++){
                if(hospital[i][j]==2){
                    q.add(new pair(ind(i,j,col),0));
                    flag=1;
                }
                if(hospital[i][j]==1)
                      count_uninfected+=1;
            }
        }
        if(flag==0)
           return -1;
        int c=0;
        int ans=0;
        while(!q.isEmpty()){
            pair p=q.remove();
            int x=p.index/col;
            int y=p.index%col;
            if(x-1>=0 && hospital[x-1][y]==1){
                q.add(new pair(ind(x-1,y,col),p.min+1));
                hospital[x-1][y]=0;
                c++;
            }
            if(x+1<row && hospital[x+1][y]==1){
                q.add(new pair(ind(x+1,y,col),p.min+1));
                hospital[x+1][y]=0;
                c++;
            }
            if(y-1>=0 && hospital[x][y-1]==1){
                q.add(new pair(ind(x,y-1,col),p.min+1));
                hospital[x][y-1]=0;
                c++;
            }
            if(y+1<col && hospital[x][y+1]==1){
                q.add(new pair(ind(x,y+1,col),p.min+1));
                hospital[x][y+1]=0;
                c++;
            }
        ans=p.min;
        }
        if(count_uninfected-c==0)
            return ans;
        return -1;
        
    }
}
