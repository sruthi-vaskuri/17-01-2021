class Solution
{
    public int ind(int i,int j,int col){
        return i*col+j;
    }
    public void check(int x,int y,int N,Queue<Integer> q,HashSet<Integer> set){
        if(x>=0 && y>=0 && x<N && y<N &&!set.contains(ind(x,y,N)))
        {
            q.add(ind(x,y,N));
            set.add(ind(x,y,N));
        }
    }
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N)
    {
        // Code here
        Queue<Integer> q=new LinkedList<>();
        HashSet<Integer> set=new HashSet<>();
        q.add(ind(KnightPos[0]-1,KnightPos[1]-1,N));
        set.add(ind(KnightPos[0]-1,KnightPos[1]-1,N));
        int c=-1;
        while(!q.isEmpty()){
            c++;
            int n=q.size();
            for(int i=0;i<n;i++){
            int p=q.remove();
            int x=p/N;
            int y=p%N;
            //System.out.println(x+" "+y+" "+c);
            if(x==TargetPos[0]-1 && y==TargetPos[1]-1)
               return c;
            check(x-2,y+1,N,q,set);
            check(x-2,y-1,N,q,set);
            check(x+2,y+1,N,q,set);
            check(x+2,y-1,N,q,set);
            check(x+1,y-2,N,q,set);
            check(x-1,y-2,N,q,set);
            check(x-1,y+2,N,q,set);
            check(x+1,y+2,N,q,set);
            }
        }
        return -1;
    }
}
