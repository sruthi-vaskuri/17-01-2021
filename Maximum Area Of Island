class Solution {
    public int ind(int i,int j,int col){
        return i*col+j;
    }
    public int maxAreaOfIsland(int[][] grid) {
        if(grid.length==0)
            return 0;
        int max=0;
        int row=grid.length;
        int col=grid[0].length;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                int c=0;
                if(grid[i][j]==1){
                    c++;
                    grid[i][j]=0;
                    Queue<Integer> q=new LinkedList<>();
                    q.add(ind(i,j,col));
                    while(!q.isEmpty()){
                        int z=q.remove();
                        int x=z/col;
                        int y=z%col;
                        if(x-1>=0 && grid[x-1][y]==1){
                            q.add(ind(x-1,y,col));
                            grid[x-1][y]=0;
                            c++;
                        }
                        if(x+1<row && grid[x+1][y]==1){
                            q.add(ind(x+1,y,col));
                            grid[x+1][y]=0;
                            c++;
                        }
                        if(y-1>=0 && grid[x][y-1]==1){
                            q.add(ind(x,y-1,col));
                            grid[x][y-1]=0;
                            c++;
                        }
                        if(y+1<col && grid[x][y+1]==1){
                            q.add(ind(x,y+1,col));
                            grid[x][y+1]=0;
                            c++;
                        }
                    }
                    max=Math.max(max,c);
                }
            }
        }
        return max;
    }
}
