class Solution {
    public boolean possibleBipartition(int N, int[][] dislikes) {
        int visit[]=new int[N];
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<N;i++)
            adj.add(new ArrayList<>());
        for(int i=0;i<dislikes.length;i++){
            adj.get(dislikes[i][0]-1).add(dislikes[i][1]-1);
            adj.get(dislikes[i][1]-1).add(dislikes[i][0]-1);
        }
        Queue<Integer> q=new LinkedList<>();
        for(int k=0;k<N;k++){
            if(visit[k]!=0)
                continue;
            q.add(k);
            visit[k]=1;
            while(!q.isEmpty()){
                int p=q.remove();
                for(int i=0;i<adj.get(p).size();i++){
                    if(visit[adj.get(p).get(i)]==0){
                        visit[adj.get(p).get(i)]=visit[p]==1?-1:1;
                        q.add(adj.get(p).get(i));
                    }
                    else{
                        if(visit[adj.get(p).get(i)]==visit[p])
                            return false;
                    }
                }
            }
        }
        return true;
    }
}
